/**
* OpenDota API
* # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
*
* OpenAPI spec version: 17.6.1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.Inline_response_200_31
import io.swagger.client.models.Inline_response_200_32
import io.swagger.client.models.Inline_response_200_33

import io.swagger.client.infrastructure.*

class ScenariosApi(basePath: kotlin.String = "https://api.opendota.com/api") : ApiClient(basePath) {

    /**
    * GET /scenarios/itemTimings
    * Win rates for certain item timings on a hero for items that cost at least 1400 gold
    * @param item Filter by item name e.g. \&quot;spirit_vessel\&quot; (optional)
    * @param heroId Hero ID (optional)
    * @return kotlin.Array<Inline_response_200_31>
    */
    @Suppress("UNCHECKED_CAST")
    fun scenariosItemTimingsGet(item: kotlin.String, heroId: kotlin.Int) : kotlin.Array<Inline_response_200_31> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("item" to listOf("$item"), "heroId" to listOf("$heroId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/scenarios/itemTimings",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<Inline_response_200_31>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Inline_response_200_31>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * GET /scenarios/laneRoles
    * Win rates for heroes in certain lane roles
    * @param laneRole Filter by lane role 1-4 (Safe, Mid, Off, Jungle) (optional)
    * @param heroId Hero ID (optional)
    * @return kotlin.Array<Inline_response_200_32>
    */
    @Suppress("UNCHECKED_CAST")
    fun scenariosLaneRolesGet(laneRole: kotlin.String, heroId: kotlin.Int) : kotlin.Array<Inline_response_200_32> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("laneRole" to listOf("$laneRole"), "heroId" to listOf("$heroId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/scenarios/laneRoles",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<Inline_response_200_32>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Inline_response_200_32>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * GET /scenarios/misc
    * Miscellaneous team scenarios
    * @param scenario pos_chat_1min,neg_chat_1min,courier_kill,first_blood (optional)
    * @return kotlin.Array<Inline_response_200_33>
    */
    @Suppress("UNCHECKED_CAST")
    fun scenariosMiscGet(scenario: kotlin.String) : kotlin.Array<Inline_response_200_33> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("scenario" to listOf("$scenario"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/scenarios/misc",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<Inline_response_200_33>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Inline_response_200_33>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
